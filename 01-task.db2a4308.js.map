{"version":3,"sources":["js/01-task.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE,EAAI;AAClB,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,WAAIA,OAAO,CAACF,EAAD,CAAX;AAAA,GAAnB,CAAP;AACD,CAFD;;AAIA,IAAMG,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;AAAA,SAAIC,OAAO,CAACC,GAAR,0BAA8BF,IAA9B,QAAJ;AAAA,CAAnB,EAEA;;;AACAL,KAAK,CAAC,IAAD,CAAL,CAAYQ,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BJ,KAAK,CAAC,IAAD,CAAL,CAAYQ,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BJ,KAAK,CAAC,IAAD,CAAL,CAAYQ,IAAZ,CAAiBJ,MAAjB,GAA0B","file":"01-task.db2a4308.js","sourceRoot":"..\\src","sourcesContent":["/*Напиши функцию delay(ms), которая возвращает промис, переходящий \r\nв состояние \"resolved\" через ms миллисекунд. Значением исполнившегося \r\nпромиса должно быть то кол-во миллисекунд которое передали во время \r\nвызова функции delay */\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => resolve(ms));\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// // Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"]}